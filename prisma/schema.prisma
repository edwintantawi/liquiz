generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subject {
  id          String     @id @default(uuid())
  userId      String     @map("user_id")
  title       String     @db.VarChar(64)
  description String     @db.VarChar(100)
  rawFile     String     @map("raw_file")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]
  topics      Topic[]

  @@map("subjects")
}

model Document {
  id        String                 @id @default(uuid())
  subjectId String                 @map("subject_id")
  content   String
  metadata  Json
  vector    Unsupported("vector")?
  subject   Subject                @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Topic {
  id        String   @id @default(uuid())
  subjectId String   @map("subject_id")
  title     String   @db.VarChar(64)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("topics")
}
